---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by HUAFEI2.
--- DateTime: 2020/6/15 14:42
---

require ("class/class")
require ("io/fs")
require ("string/string")
---
--- @class LTabFile
---
local LTabFile = LTabFile or class("LTabFile")

function LTabFile:ctor(szFilePath)
    -- szFilePath = FS.normalize(szFilePath);
    self.m_szOriginFilePath = szFilePath;
    -- if not FS.Path.Exists(szFilePath) then
    --     Traceback("[LTabFile] szFilePath "..szFilePath.." is not exists.");
    -- end
    self.m_szFilePath = szFilePath
    self.m_tabHeaders = {}
    self.m_tabCells = {} -- 行优先
    self.m_tbColStrToIdx = {};
    self.m_bValid = self:parse()
    if self.m_bValid ~= true then
        -- LOG_E("[LTabFile:ctor] load or parse file failed:", szFilePath)
    end
end

---
--- @private
---
function LTabFile:parseLine(szLine)
    if string.sub(szLine, 1, 1) == "#" then
        return
    end

    local cell = ""
    local cells = {}
    local szLas = nil

    for i = 1, string.len(szLine) do
        szLas = string.sub(szLine, i, i)
        if szLas == "\t" then
            if string.sub(szLine, i + 1, i + 1) == "\t" or i == string.len(szLine) then
                if cell ~= "" then
                    table.insert(cells, cell)
                    cell = ""
                end
                table.insert(cells, "")
            else
                if cell ~= "" then
                    table.insert(cells, cell)
                    cell = ""
                end
            end
        else
            cell = cell .. szLas
        end
    end
    if cell ~= "" then
        table.insert(cells, cell)
    end

    return cells
end

---
--- @private
---
function LTabFile:parse()
    -- local vm = g_GetLuaVM()
    local file = FS.Open(self.m_szFilePath)
    if not file then
        return;
    end
    local szContent = file:Read();
    if type(szContent) ~= "string" then
        LOG_E("[LTabFile:ctor] load file failed:", self.m_szFilePath)
        file:Close();
        return false
    end
    print("szContent =", type(szContent))
    local lines = string.split(szContent, "\r\n")

    if #lines < 1 then
        file:Close();
        return true
    end

    local headers = self:parseLine(lines[1])
    if headers == nil then
        LOG_I("[LTabFile:parse] 2, ", lines[1])
        file:Close();
        return false
    end
    table.insert(self.m_tabCells, headers)

    self.m_tabHeaders = headers
    local nColCount = #self.m_tabHeaders
    local nRowCount = #lines
    for i = 2, nRowCount do
        local cells = self:parseLine(lines[i])
        if cells ~= nil then
            table.insert(self.m_tabCells, cells)
        end
    end


    file:Close();
    return true
end

---
--- 是否有效
--- @return boolean
---
function LTabFile:IsValid()
    return self.m_bValid
end

---
--- 获取行计数
--- @return number
---
function LTabFile:GetRowCount()
    return #self.m_tabCells
end

---
--- 获取列总数
--- @return number
---
function LTabFile:GetColCount()
    return #self.m_tabHeaders
end

---
--- 获取列索引
--- @param szColName string
--- @return number
---
function LTabFile:GetColIdxByName(szColName)
    local nIdx = self.m_tbColStrToIdx[szColName];
    if nil ~= nIdx then
        return nIdx;
    end

    for i = 1, #self.m_tabHeaders do
        if self.m_tabHeaders[i] == szColName then
            self.m_tbColStrToIdx[szColName] = i;
            return i
        end
    end
    return 0
end

---
--- 获取数字
--- @param nRow number
--- @param col number | string
--- @param nDefault number
--- @return number
---
function LTabFile:GetNumber(nRow, col, nDefault)
    nDefault = nDefault or 0
    local strCell = self:GetString(nRow, col)
    return tonumber(strCell) or nDefault
end

---
--- 获取数组
--- @param nRow number
--- @param col number | string
--- @param nDefault number
--- @param withOperator boolean
--- @return number
---
function LTabFile:GetArray(nRow, col, nDefault, withOperator)
    nDefault = nDefault or {}
    withOperator = not (not withOperator)
    local strCell = self:GetString(nRow, col)
    return util.ExtractDataSheetWithBrace(strCell, withOperator) or nDefault
end

---
--- 获取string
--- @param nRow number
--- @param col number | string
--- @param szDefault string
--- @return number
---
function LTabFile:GetString(nRow, col, szDefault)
    szDefault = szDefault or ""
    local nCol = col
    local tabLineCells = self.m_tabCells[nRow]
    if type(col) == "string" then
        nCol = self:GetColIdxByName(col)
    end
    local strRes = tabLineCells[nCol]
    if
        (nRow > #self.m_tabCells or nRow <= 0) or (nCol > #self.m_tabHeaders or nCol <= 0) or (nCol > #tabLineCells) or
            (strRes == nil)
     then
        strRes = szDefault
    end
    local strTranslation = g_LLocalization:TranslateScheme(self.m_szOriginFilePath, col, nRow);
    if not string.isempty(strTranslation) then
        strRes = strTranslation;
    end
    return strRes;
end

---
--- 查找目标字符串所在行数
--- @param szText string
--- @param nCol number | string
--- @return number
---
function LTabFile:SearchText(szText, col)
    local nCol = col;
    if type(col) == "string" then
        nCol = self:GetColIdxByName(col);
    end
    if nCol > #self.m_tabHeaders or nCol <= 0 then
        return 0;
    end
    for nRow, value in ipairs(self.m_tabCells) do
        local szCheck = self.m_tabCells[nRow][nCol];
        if g_LLocalization:HasSchemeTranslation(self.m_szFilePath, col, nRow) then
            szCheck = g_LLocalization:TranslateScheme(self.m_szFilePath, col, nRow)
        end
        if string.find(szCheck, szText) ~= nil then
            return nRow;
        end
    end
    return 0;
end

---
--- @type LTabFile
---
_G.LTabFile = LTabFile

local tabfile = LTabFile:new("tab_test.txt");